name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, ubuntu-latest]
        include:
          - os: windows-2022
          - os: ubuntu-latest
            container: registry.gitlab.steamos.cloud/steamrt/sniper/sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: LuaUnlocker

      - name: Checkout Metamod
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/metamod-source
          ref: master
          path: mmsource-2.0
          submodules: recursive

      - name: Checkout HL2SDK
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/hl2sdk
          ref: cs2
          path: hl2sdk-cs2

      - name: Patch HL2SDK (va_list fix)
        run: |
          sed -i 's/m_ReuseList = List;/va_copy(m_ReuseList, List);/g' hl2sdk-cs2/public/tier0/platform.h

      - name: Install Protobuf (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install Protobuf (Windows)
        if: matrix.os == 'windows-2022'
        shell: cmd
        run: |
          # Install protobuf via vcpkg with static libraries
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          bootstrap-vcpkg.bat
          vcpkg install protobuf:x64-windows-static
          echo PROTOBUF_INCLUDE=%cd%\installed\x64-windows-static\include >> %GITHUB_ENV%
          echo PROTOC_PATH=%cd%\installed\x64-windows-static\tools\protobuf\protoc.exe >> %GITHUB_ENV%
          cd ..

      
      - name: Verify Protobuf Installation (Windows)
        if: matrix.os == 'windows-2022'
        shell: cmd
        run: |
          echo Checking protobuf installation...
          dir /s /b "%PROTOBUF_INCLUDE%\google\protobuf"
          echo PROTOC exists at: %PROTOC_PATH%
          if exist "%PROTOC_PATH%" (
            echo Protoc found successfully
          ) else (
            echo ERROR: Protoc not found!
            exit 1
          )
      
      - name: Regenerate Protobuf Files (Windows)
        if: matrix.os == 'windows-2022'
        shell: cmd
        run: |
          "%PROTOC_PATH%" --cpp_out=LuaUnlocker/protobuf/generated -I LuaUnlocker/protobuf/include -I LuaUnlocker/protobuf LuaUnlocker/protobuf/*.proto
          xcopy /Y /E LuaUnlocker\protobuf\generated\*.pb.h hl2sdk-cs2\public\

      - name: Regenerate Protobuf Files (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd LuaUnlocker/protobuf
          protoc --cpp_out=generated *.proto

      - name: Copy Protobuf Headers to SDK (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p hl2sdk-cs2/public
          cp LuaUnlocker/protobuf/generated/*.pb.h hl2sdk-cs2/public/

      - name: Copy Protobuf Headers to SDK (Windows)
        if: matrix.os == 'windows-2022'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path hl2sdk-cs2/public
          Copy-Item -Path LuaUnlocker/protobuf/generated/*.pb.h -Destination hl2sdk-cs2/public/


      - name: Checkout AMBuild
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/ambuild
          path: ambuild

      - name: Install AMBuild
        run: |
          cd ambuild && python setup.py install && cd ..

      - name: Install Clang 16
        if: matrix.os == 'ubuntu-latest'
        run: |
          apt update && apt install -y clang-16
          ln -sf /usr/bin/clang-16 /usr/bin/clang && ln -sf /usr/bin/clang++-16 /usr/bin/clang++

      - name: Verify libtier0.so (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ ! -f "hl2sdk-cs2/lib/linux64/libtier0.so" ]; then
            echo "libtier0.so missing - creating dummy file"
            mkdir -p hl2sdk-cs2/lib/linux64
            touch hl2sdk-cs2/lib/linux64/libtier0.so
          fi

      - name: Verify Protobuf Headers (Windows)
        if: matrix.os == 'windows-2022'
        shell: cmd
        run: |
          dir /s /b "%PROTOBUF_INCLUDE%\google\protobuf\runtime_version.h"
          echo INCLUDE=%INCLUDE%
          echo PROTOBUF_INCLUDE=%PROTOBUF_INCLUDE%

      - name: Validate MSVC Setup (Windows)
        if: matrix.os == 'windows-2022'
        shell: cmd
        run: |
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cl.exe /?
          where cl.exe
          echo INCLUDE=%INCLUDE%

      - name: Build (Windows)
        if: matrix.os == 'windows-2022'
        working-directory: LuaUnlocker
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set INCLUDE=%PROTOBUF_INCLUDE%;%INCLUDE%
          mkdir build
          cd build
          python ../configure.py --enable-optimize --sdks cs2 --target-arch x86_64 --include-dir /usr/include
          ambuild

      - name: Build (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        working-directory: LuaUnlocker
        shell: bash
        run: |
          mkdir build && cd build
          python ../configure.py --enable-optimize --symbol-files --sdks cs2 --include-dir /usr/include
          ambuild

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}
          path: LuaUnlocker/build/package

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Package
        run: |
          version=`echo $GITHUB_REF | sed "s/refs\/tags\///"`
          if [ -d "./Linux/" ]; then
            cd ./Linux/
            tar -czf ../${{ github.event.repository.name }}-${version}-linux.tar.gz addons
            cd -
          fi
          if [ -d "./Windows/" ]; then
            cd ./Windows/
            zip -r ../${{ github.event.repository.name }}-${version}-windows.zip addons
            cd -
          fi

      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.event.repository.name }}-*
          tag: ${{ github.ref }}
          file_glob: true
